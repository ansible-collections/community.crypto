---
- name: (Expired, {{select_crypto_backend}}) Generate privatekey
  openssl_privatekey:
    path: '{{ remote_tmp_dir }}/has_expired_privatekey.pem'
    size: '{{ default_rsa_key_size_certifiates }}'

- name: (Expired, {{select_crypto_backend}}) Generate CSR
  openssl_csr:
    path: '{{ remote_tmp_dir }}/has_expired_csr.csr'
    privatekey_path: '{{ remote_tmp_dir }}/has_expired_privatekey.pem'
    subject:
      commonName: www.example.com

- name: (Expired, {{select_crypto_backend}}) Generate expired selfsigned certificate
  # Cryptography won't allow creating expired certificates; so we create it with 'command'
  command: "{{ openssl_binary }} x509 -req -days -1 -in {{ remote_tmp_dir }}/has_expired_csr.csr -signkey {{ remote_tmp_dir }}/has_expired_privatekey.pem -out {{ remote_tmp_dir }}/has_expired_cert.pem"

- name: "(Expired) Check task fails because cert is expired (has_expired: false)"
  x509_certificate:
    provider: assertonly
    path: "{{ remote_tmp_dir }}/has_expired_cert.pem"
    has_expired: false
    select_crypto_backend: '{{ select_crypto_backend }}'
  ignore_errors: true
  register: expired_cert_check

- name: (Expired, {{select_crypto_backend}}) Ensure previous task failed
  assert:
    that: expired_cert_check is failed

- name: "(Expired) Check expired cert check is ignored (has_expired: true)"
  x509_certificate:
    provider: assertonly
    path: "{{ remote_tmp_dir }}/has_expired_cert.pem"
    has_expired: true
    select_crypto_backend: '{{ select_crypto_backend }}'
  register: expired_cert_skip
