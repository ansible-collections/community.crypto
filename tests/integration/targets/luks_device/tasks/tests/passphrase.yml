---
- name: Create with passphrase1
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
    passphrase: "{{ cryptfile_passphrase1 }}"
    pbkdf:
      iteration_time: 0.1
      algorithm: argon2i
      memory: 1000
      parallel: 1
  become: yes
  ignore_errors: yes
  register: create_passphrase_1

- name: Make sure that the previous task only fails because the LUKS version used cannot handle the PBKDF parameters
  assert:
    that:
      - create_passphrase_1 is not failed or 'Failed to set pbkdf parameters' in create_passphrase_1.msg

- name: Create with passphrase1 (without argon2i)
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
    passphrase: "{{ cryptfile_passphrase1 }}"
    pbkdf:
      iteration_time: 0.1
  become: yes
  when: create_passphrase_1 is failed and 'Failed to set pbkdf parameters' in create_passphrase_1.msg

- name: Open with passphrase1
  luks_device:
    device: "{{ cryptfile_device }}"
    state: opened
    passphrase: "{{ cryptfile_passphrase1 }}"
  become: yes
  ignore_errors: yes
  register: open_try
- assert:
    that:
    - open_try is not failed
- name: Close
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
  become: yes

- name: Give access with ambiguous new_ arguments
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
    passphrase: "{{ cryptfile_passphrase1 }}"
    new_passphrase: "{{ cryptfile_passphrase2 }}"
    new_keyfile: "{{ role_path }}/files/keyfile1"
    pbkdf:
      iteration_time: 0.1
  become: yes
  ignore_errors: yes
  register: new_try
- assert:
    that:
      - new_try is failed

- name: Try to open with passphrase2
  luks_device:
    device: "{{ cryptfile_device }}"
    state: opened
    passphrase: "{{ cryptfile_passphrase2 }}"
  become: yes
  ignore_errors: yes
  register: open_try
- assert:
    that:
    - open_try is failed

- name: Give access to passphrase2
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
    passphrase: "{{ cryptfile_passphrase1 }}"
    new_passphrase: "{{ cryptfile_passphrase2 }}"
    pbkdf:
      iteration_time: 0.1
  become: yes
  register: result_1

- name: Give access to passphrase2 (idempotent)
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
    passphrase: "{{ cryptfile_passphrase1 }}"
    new_passphrase: "{{ cryptfile_passphrase2 }}"
  become: yes
  register: result_2

- assert:
    that:
      - result_1 is changed
      - result_2 is not changed

- name: Open with passphrase2
  luks_device:
    device: "{{ cryptfile_device }}"
    state: opened
    passphrase: "{{ cryptfile_passphrase2 }}"
  become: yes
  ignore_errors: yes
  register: open_try
- assert:
    that:
    - open_try is not failed
- name: Close
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
  become: yes

- name: Try to open with keyfile1
  luks_device:
    device: "{{ cryptfile_device }}"
    state: opened
    keyfile: "{{ role_path }}/files/keyfile1"
  become: yes
  ignore_errors: yes
  register: open_try
- assert:
    that:
    - open_try is failed

- name: Give access to keyfile1 from passphrase1
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
    passphrase: "{{ cryptfile_passphrase1 }}"
    new_keyfile: "{{ role_path }}/files/keyfile1"
    pbkdf:
      iteration_time: 0.1
  become: yes

- name: Remove access with ambiguous remove_ arguments
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
    remove_keyfile: "{{ role_path }}/files/keyfile1"
    remove_passphrase: "{{ cryptfile_passphrase1 }}"
  become: yes
  ignore_errors: yes
  register: remove_try
- assert:
    that:
      - remove_try is failed

- name: Open with keyfile1
  luks_device:
    device: "{{ cryptfile_device }}"
    state: opened
    keyfile: "{{ role_path }}/files/keyfile1"
  become: yes
  ignore_errors: yes
  register: open_try
- assert:
    that:
    - open_try is not failed
- name: Close
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
  become: yes

- name: Remove access for passphrase1
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
    remove_passphrase: "{{ cryptfile_passphrase1 }}"
  become: yes
  register: result_1

- name: Remove access for passphrase1 (idempotent)
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
    remove_passphrase: "{{ cryptfile_passphrase1 }}"
  become: yes
  register: result_2

- assert:
    that:
      - result_1 is changed
      - result_2 is not changed

- name: Try to open with passphrase1
  luks_device:
    device: "{{ cryptfile_device }}"
    state: opened
    passphrase: "{{ cryptfile_passphrase1 }}"
  become: yes
  ignore_errors: yes
  register: open_try
- assert:
    that:
    - open_try is failed

- name: Try to open with passphrase3
  luks_device:
    device: "{{ cryptfile_device }}"
    state: opened
    passphrase: "{{ cryptfile_passphrase3 }}"
  become: yes
  ignore_errors: yes
  register: open_try
- assert:
    that:
    - open_try is failed

- name: Give access to passphrase3 from keyfile1
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
    keyfile: "{{ role_path }}/files/keyfile1"
    new_passphrase: "{{ cryptfile_passphrase3 }}"
    pbkdf:
      iteration_time: 0.1
  become: yes

- name: Open with passphrase3
  luks_device:
    device: "{{ cryptfile_device }}"
    state: opened
    passphrase: "{{ cryptfile_passphrase3 }}"
  become: yes
  ignore_errors: yes
  register: open_try
- assert:
    that:
    - open_try is not failed
- name: Close
  luks_device:
    device: "{{ cryptfile_device }}"
    state: closed
  become: yes
