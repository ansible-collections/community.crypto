---
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later

- name: Check invalid slot (luks1, 8)
  luks_device:
    device: "{{ cryptfile_device }}"
    state: present
    type: luks1
    keyfile: "{{ remote_tmp_dir }}/keyfile1"
    keyslot: 8
    pbkdf:
      iteration_time: 0.1
  ignore_errors: true
  become: true
  register: create_luks1_slot8
- name: Check invalid slot (luks2, 32)
  luks_device:
    device: "{{ cryptfile_device }}"
    state: present
    type: luks2
    keyfile: "{{ remote_tmp_dir }}/keyfile1"
    keyslot: 32
    pbkdf:
      iteration_time: 0.1
  ignore_errors: true
  become: true
  register: create_luks2_slot32
- name: Check invalid slot (no luks type, 8)
  luks_device:
    device: "{{ cryptfile_device }}"
    state: present
    keyfile: "{{ remote_tmp_dir }}/keyfile1"
    keyslot: 8
    pbkdf:
      iteration_time: 0.1
  ignore_errors: true
  become: true
  register: create_luks_slot8
- name: Check valid slot (luks2, 8)
  luks_device:
    device: "{{ cryptfile_device }}"
    state: present
    type: luks2
    keyfile: "{{ remote_tmp_dir }}/keyfile1"
    keyslot: 8
    pbkdf:
      iteration_time: 0.1
  become: true
  register: create_luks2_slot8
- name: Check add valid slot (no luks type, 10)
  luks_device:
    device: "{{ cryptfile_device }}"
    state: present
    keyfile: "{{ remote_tmp_dir }}/keyfile1"
    new_keyfile: "{{ remote_tmp_dir }}/keyfile2"
    new_keyslot: 10
    pbkdf:
      iteration_time: 0.1
  become: true
  register: create_luks_slot10
- assert:
    that:
    - create_luks1_slot8 is failed
    - create_luks2_slot32 is failed
    - create_luks_slot8 is failed
    - create_luks2_slot8 is changed
    - create_luks_slot10 is changed

- name: Check remove slot 8 without key
  luks_device:
    device: "{{ cryptfile_device }}"
    state: absent
    remove_keyslot: 8
  ignore_errors: true
  become: true
  register: kill_slot8_nokey
- name: Check remove slot 8 with slot 8 key
  luks_device:
    device: "{{ cryptfile_device }}"
    state: absent
    remove_keyslot: 8
    keyfile: "{{ remote_tmp_dir }}/keyfile1"
  ignore_errors: true
  become: true
  register: kill_slot8_key_slot8
- assert:
    that:
    - kill_slot8_nokey is failed
    - kill_slot8_key_slot8 is failed